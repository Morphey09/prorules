rules:
  - id: tainted-os-command-stdlib-aws-lambda-secure-if-array
    message: Untrusted input might be injected into a command executed by the
      application, which can lead to a command injection vulnerability. An
      attacker can execute arbitrary commands, potentially gaining complete
      control of the system. To prevent this vulnerability, avoid executing OS
      commands with user input. If this is unavoidable, validate and sanitize
      the input, and use safe methods for executing the commands.
    severity: ERROR
    metadata:
      likelihood: MEDIUM
      impact: HIGH
      confidence: HIGH
      category: security
      subcategory:
        - vuln
      cwe:
        - "CWE-78: Improper Neutralization of Special Elements used in an OS
          Command ('OS Command Injection')"
      cwe2020-top25: true
      cwe2021-top25: true
      cwe2022-top25: true
      display-name: OS Command Injection in AWS Lambda
      functional-categories:
        - os::sink::os-command-or-thread::commands
        - os::sink::os-command-or-thread::os
        - os::sink::os-command-or-thread::popen2
        - os::sink::os-command-or-thread::stdlib
        - os::sink::os-command-or-thread::stdlib2
        - os::sink::os-command-or-thread::stdlib3
        - os::sink::os-command-or-thread::subprocess
        - serverless::source::function-params::aws-lambda
      owasp:
        - A01:2017 - Injection
        - A03:2021 - Injection
      references:
        - https://docs.python.org/3/library/os.html
        - https://docs.python.org/3/library/subprocess.html#subprocess.Popen
        - https://owasp.org/Top10/A03_2021-Injection
        - https://semgrep.dev/docs/cheat-sheets/python-command-injection/
        - https://stackless.readthedocs.io/en/v2.7.16-slp/library/commands.html
      technology:
        - aws
        - aws-lambda
        - cloud
        - commands
        - os
        - popen2
        - serverless
        - stdlib
        - stdlib2
        - stdlib3
        - subprocess
      license: Copyright 2023 Semgrep, Inc.
      vulnerability_class:
        - Command Injection
    languages:
      - python
    mode: taint
    options:
      interfile: true
      symbolic_propagation: true
      taint_assume_safe_booleans: true
      taint_assume_safe_numbers: true
    pattern-sources:
      - patterns:
          - pattern-either:
              - patterns:
                  - pattern: |
                      def $HANDLER($EVENT, context):
                          ...
                  - metavariable-regex:
                      metavariable: $EVENT
                      regex: ^(event)$
              - patterns:
                  - pattern: |
                      def $HANDLER($EVENT, $CONTEXT):
                          ...
                  - metavariable-regex:
                      metavariable: $HANDLER
                      regex: .*(aws_lambda|lambda_handler).*
          - focus-metavariable: $EVENT
    pattern-propagators:
      - from: $DEFAULT
        patterns:
          - patterns:
              - pattern-either:
                  - pattern-inside: |
                      $DICT[$KEY]
                      ...
                  - pattern-inside: |
                      $DICT.get($KEY, $DEFAULT)
                      ...
                  - pattern-inside: |
                      $DICT = { ... }
                      ...
                  - pattern-inside: |
                      $DICT = dict(...)
                      ...
              - pattern-either:
                  - pattern: $DICT.get($FIELD, $DEFAULT)
                  - pattern: $DICT.setdefault($KEY, $DEFAULT)
        to: $DICT
      - from: $FROM_DICT
        patterns:
          - patterns:
              - pattern-either:
                  - pattern-inside: |
                      $TO_DICT[$KEY]
                      ...
                  - pattern-inside: |
                      $TO_DICT.get($KEY, $DEFAULT)
                      ...
                  - pattern-inside: |
                      $TO_DICT = { ... }
                      ...
                  - pattern-inside: |
                      $TO_DICT = dict(...)
                      ...
                  - pattern-inside: |
                      $FROM_DICT[$KEY]
                      ...
                  - pattern-inside: |
                      $FROM_DICT.get($KEY, $DEFAULT)
                      ...
                  - pattern-inside: |
                      $FROM_DICT = { ... }
                      ...
                  - pattern-inside: |
                      $FROM_DICT = dict(...)
                      ...
              - pattern-either:
                  - pattern: $TO_DICT.update($FROM_DICT)
                  - pattern: $TO_DICT | $FROM_DICT
                  - pattern: $TO_DICT |= $FROM_DICT
        to: $TO_DICT
      - from: $FROM
        patterns:
          - patterns:
              - pattern-either:
                  - pattern-inside: |
                      $LIST = [ ... ]
                      ...
                  - pattern-inside: |
                      $LIST = list(...)
                      ...
              - pattern-either:
                  - pattern: $LIST.append($FROM)
                  - pattern: $LIST.extend($FROM)
                  - pattern: $LIST.insert($INDEX, $FROM)
        to: $LIST
      - from: $FROM
        patterns:
          - patterns:
              - pattern-either:
                  - pattern: $FROM.$LOG($SINK, ...)
                  - pattern: $FROM.$LOG(..., msg=$SINK, ...)
                  - pattern: $APP.logger.$LOG($SINK, ...)
              - metavariable-regex:
                  metavariable: $LOG
                  regex: ^(info|warning|error|critical|log|exception|handle)$
        to: $SINK
      - from: $FROM
        patterns:
          - patterns:
              - pattern-either:
                  - pattern-inside: |
                      $SET = { $ITEM, ... }
                      ...
                  - pattern-inside: |
                      $SET = set(...)
                      ...
                  - pattern-inside: |
                      $OTHERSET = { $ITEM, ... }
                      ...
                  - pattern-inside: |
                      $OTHERSET = set(...)
                      ...
              - pattern-either:
                  - pattern: $SET.update(..., $FROM, ...)
                  - pattern: $SET.intersection_update(..., $FROM, ...)
                  - pattern: $SET.difference_update(..., $FROM, ...)
                  - pattern: $SET.symmetric_difference_update(..., $FROM, ...)
                  - pattern: $SET.add($FROM)
                  - pattern: $SET |= $FROM
                  - pattern: $SET &= $FROM
                  - pattern: $SET -= $FROM
                  - pattern: $SET ^= $FROM
        to: $SET
      - from: $FORM
        patterns:
          - pattern: $FORM.populate_obj($OBJ)
        to: $OBJ
    pattern-sinks:
      - pattern-either:
          - patterns:
              - pattern: os.$FUNC($SINK, ...)
              - metavariable-regex:
                  metavariable: $FUNC
                  regex: ^(popen|popen2|popen3|popen4)$
              - focus-metavariable: $SINK
          - patterns:
              - pattern: os.$FUNC(..., $ARG=$SINK, ...)
              - metavariable-regex:
                  metavariable: $FUNC
                  regex: ^(popen|popen2|popen3|popen4)$
              - metavariable-regex:
                  metavariable: $ARG
                  regex: ^(cmd|path|file)$
              - focus-metavariable: $SINK
          - patterns:
              - pattern: popen2.$FUNC($SINK, ...)
              - metavariable-regex:
                  metavariable: $FUNC
                  regex: ^(popen2|popen3|popen4|Popen3|Popen4)$
              - focus-metavariable: $SINK
          - patterns:
              - pattern: popen2.$FUNC(..., cmd=$SINK, ...)
              - metavariable-regex:
                  metavariable: $FUNC
                  regex: ^(popen2|popen3|popen4|Popen3|Popen4)$
              - focus-metavariable: $SINK
      - pattern-either:
          - pattern-either:
              - patterns:
                  - pattern-either:
                      - pattern: subprocess.Popen($SINK, ...)
                      - pattern: subprocess.Popen(..., args=$SINK, ...)
                  - focus-metavariable: $SINK
              - patterns:
                  - pattern-inside: subprocess.Popen(...)
                  - pattern: subprocess.$FUNC(..., $ARG=$SINK, ...)
                  - metavariable-regex:
                      metavariable: $ARG
                      regex: ^(executable|cwd|env)$
                  - focus-metavariable: $SINK
          - pattern-either:
              - patterns:
                  - pattern: subprocess.Popen($ARG1, $ARG2, $EXECUTABLE, $ARG4, $ARG5, $ARG6, $ARG7,
                      $ARG8, $ARG9, $CWD, $ENV, $ARG12, $ARG13, $ARG14, $ARG15,
                      $ARG16, $ARG17, $ARG18, $ARG19, $ARG20, $ARG21, $ARG22,
                      $ARG23, $ARG24, $ARG25, $ARG26, $ARG27)
                  - focus-metavariable: $EXECUTABLE
              - patterns:
                  - pattern: subprocess.Popen($ARG1, $ARG2, $EXECUTABLE, $ARG4, $ARG5, $ARG6, $ARG7,
                      $ARG8, $ARG9, $CWD, $ENV, $ARG12, $ARG13, $ARG14, $ARG15,
                      $ARG16, $ARG17, $ARG18, $ARG19, $ARG20, $ARG21, $ARG22,
                      $ARG23, $ARG24, $ARG25, $ARG26, $ARG27)
                  - focus-metavariable: $CWD
              - patterns:
                  - pattern: subprocess.Popen($ARG1, $ARG2, $EXECUTABLE, $ARG4, $ARG5, $ARG6, $ARG7,
                      $ARG8, $ARG9, $CWD, $ENV, $ARG12, $ARG13, $ARG14, $ARG15,
                      $ARG16, $ARG17, $ARG18, $ARG19, $ARG20, $ARG21, $ARG22,
                      $ARG23, $ARG24, $ARG25, $ARG26, $ARG27)
                  - focus-metavariable: $ENV
    pattern-sanitizers:
      - patterns:
          - pattern-either:
              - pattern: int(...)
              - pattern: bool(...)
              - pattern: float(...)
              - pattern: complex(...)
              - pattern: oct(...)
              - pattern: hex(...)
              - pattern: bin(...)
              - pattern: round(...)
              - pattern: id(...)
              - pattern: hash(...)
              - pattern: len(...)
              - pattern: type(...)
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  $DICT[$KEY]
                  ...
              - pattern-inside: |
                  $DICT = { $KEY: $VALUE for ... in ...}
                  ...
              - pattern-inside: |
                  $DICT.get($KEY, $DEFAULT)
                  ...
              - pattern-inside: |
                  $DICT = { }
                  ...
              - pattern-inside: |
                  $DICT = { $KEY: $VALUE, ... }
                  ...
              - pattern-inside: |
                  $DICT = dict(...)
                  ...
          - pattern-either:
              - pattern: $DICT.clear()
              - pattern: $DICT.len()
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  $LIST = [ ... ]
                  ...
              - pattern-inside: |
                  $LIST = list(...)
                  ...
          - pattern-either:
              - pattern: $LIST.clear()
              - pattern: $LIST.count(...)
              - pattern: $LIST.index(...)
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  $SET = { $ITEM, ... }
                  ...
              - pattern-inside: |
                  $SET = set(...)
                  ...
          - pattern-either:
              - pattern: $SET.len()
              - pattern: $SET.clear()
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  $SET = { $ITEM, ... }
                  ...
              - pattern-inside: |
                  $SET = { $ITEM for ... in ...}
                  ...
              - pattern-inside: |
                  $SET = set(...)
                  ...
              - pattern-inside: |
                  $SET = frozenset(...)
                  ...
              - pattern-inside: |
                  $OTHERSET = { $ITEM, ... }
                  ...
              - pattern-inside: |
                  $OTHERSET = set(...)
                  ...
          - pattern-either:
              - pattern: $SET.isdisjoint($OTHERSET)
              - pattern: $SET.difference($OTHERSET)
              - pattern: $SET.issubset($OTHERSET)
              - pattern: $SET < $OTHERSET
              - pattern: $SET <= $OTHERSET
              - pattern: $SET.issuperset($OTHERSET)
              - pattern: $SET > $OTHERSET
              - pattern: $SET >= $OTHERSET
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  $TUPLE = ( $ITEM, ... )
                  ...
              - pattern-inside: |
                  $TUPLE = $ITEM, ...
                  ...
              - pattern-inside: |
                  $TUPLE = tuple(...)
                  ...
          - pattern-either:
              - pattern: $TUPLE.len()
      - pattern: django.shortcuts.get_object_or_404(...)
      - pattern: django.shortcuts.get_list_or_404(...)
      - pattern: "[...]"
      - pattern: $ARRAY.append(...)
