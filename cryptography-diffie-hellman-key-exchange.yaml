rules:
  - id: cryptography-diffie-hellman-key-exchange
    message: The original, finite field, Diffie-Hellman (DH) key exchange algorithm
      is susceptible to cryptanalytic attacks. Elliptic-Curve Diffie-Hellman
      (ECDH) represents a safer choice. In general, low-level cryptographic
      primitives, found in the `cryptography.hazmat package`, are complex and
      potentially dangerous, requiring deep cryptographic knowledge. It is
      recommended to use the higher-level recipes layer as a secure default and
      resort to the hazmat layer only when necessary.
    severity: INFO
    metadata:
      likelihood: LOW
      impact: HIGH
      confidence: HIGH
      category: security
      subcategory:
        - secure default
      cwe:
        - "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
      display-name: Risky Cryptographic Algorithm in Cryptography
      functional-categories:
        - crypto::search::asymmetric-algorithm::cryptography
      owasp:
        - A02:2021 - Cryptographic Failures
        - A03:2017 - Sensitive Data Exposure
      references:
        - https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms
        - https://cryptography.io/en/latest/hazmat/primitives/asymmetric/dh/#diffie-hellman-key-exchange
        - https://cryptography.io/en/latest/hazmat/primitives/asymmetric/ec/#cryptography.hazmat.primitives.asymmetric.ec.ECDH
        - https://csrc.nist.gov/pubs/sp/800/56/a/r3/final
        - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
        - https://weakdh.org/sysadmin.html
      technology:
        - crypto
        - cryptography
        - cryptography.hazmat
      license: Copyright 2023 Semgrep, Inc.
      vulnerability_class:
        - Cryptographic Issues
    languages:
      - python
    fix: $KEY =
      cryptography.hazmat.primitives.asymmetric.ec.generate_private_key(cryptography.hazmat.primitives.asymmetric.ec.SECP384R1())
    options:
      symbolic_propagation: true
    patterns:
      - patterns:
          - pattern-inside: >
              $PARAMS =
              cryptography.hazmat.primitives.asymmetric.dh.generate_parameters(...)

              ...
          - pattern: $KEY = $PARAMS.generate_private_key()
