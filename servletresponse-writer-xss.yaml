rules:
  - id: servletresponse-writer-xss
    message: "Untrusted user input enters a dangerous API, which can lead to a
      Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when
      untrusted input executes malicious JavaScript code, leading to issues such
      as account compromise and sensitive information leakage. Ensure your data
      is properly encoded using org.owasp.encoder.Encode.forHtml:
      `Encode.forHtml($VAR)`."
    severity: ERROR
    metadata:
      likelihood: HIGH
      impact: MEDIUM
      confidence: MEDIUM
      category: security
      subcategory:
        - vuln
      cwe:
        - "CWE-79: Improper Neutralization of Input During Web Page Generation
          ('Cross-site Scripting')"
      cwe2021-top25: true
      cwe2022-top25: true
      functional-categories:
        - web::source::cookie::Servlet
        - web::source::http-params::Servlet
        - web::source::http-body::Servlet
        - web::source::header::Servlet
        - web::source::url-path-params::Servlet
        - web::source::form-data::Servlet
        - web::source::session-properties::Servlet
        - web::sink::direct-response::Servlet
      owasp:
        - A07:2017 - Cross-Site Scripting (XSS)
        - A03:2021 - Injection
      references:
        - https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)
        - https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html
        - https://portal.securecodewarrior.com/#/learning-resources/application_security_weaknesses~2Fweb~2Fdata_handling~2Fxss~2Fstored
        - https://portal.securecodewarrior.com/#/learning-resources/application_security_weaknesses~2Fweb~2Fdata_handling~2Fxss~2Freflected
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#XSS_SERVLET
      technology:
        - java
        - servlets
      license: Copyright 2023 Semgrep, Inc.
      vulnerability_class:
        - Cross-Site-Scripting (XSS)
    languages:
      - java
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern: (HttpServletRequest $REQ).$REQFUNC(...)
              - pattern: |
                  (ServletRequest $REQ).$REQFUNC(...) 
              - patterns:
                  - pattern-inside: >
                      (javax.servlet.http.Cookie[] $COOKIES) =
                      (HttpServletRequest $REQ).getCookies(...);

                      ...

                      for (javax.servlet.http.Cookie $COOKIE: $COOKIES) {
                        ...
                      }
                  - pattern: |
                      $COOKIE.getValue(...)
              - patterns:
                  - pattern-inside: |
                      $TYPE[] $VALS = (HttpServletRequest $REQ).$GETFUNC(...);
                      ...
                  - pattern: |
                      $PARAM = $VALS[$INDEX];
          - pattern-not: |
              $REQ.getUserPrincipal() 
          - pattern-not: |
              $REQ.getSession(...) 
          - pattern-not: |
              $REQ.getAuthType(...) 
          - pattern-not: |
              $REQ.getMethod(...) 
          - pattern-not: |
              $REQ.getLocales(...) 
          - pattern-not: |
              $REQ.getLocale(...) 
          - pattern-not: |
              $REQ.isUserinRole(...) 
          - pattern-not: |
              $REQ.isRequestdSessionIdValid(...) 
          - pattern-not: |
              $REQ.isRequestedSessionIdFromUrl(...) 
          - pattern-not: |
              $REQ.getIntHeader(...) 
          - pattern-not: |
              $REQ.getDateHeader(...) 
          - pattern-not: |
              $REQ.authenticate(...) 
          - pattern-not: |
              $REQ.isUserInRole(...) 
          - pattern-not: |
              $REQ.getAttribute(...)
          - pattern-not: |
              $REQ.getAttributeNames(...)
          - pattern-not: |
              $REQ.getAuthType(...)
    pattern-sinks:
      - pattern: |
          (PrintWriter $WRITER).write(...);
      - pattern: |
          $RESP.getWriter().write(...);
    pattern-sanitizers:
      - pattern: Encode.forHtml(...)
      - pattern: (PolicyFactory $POLICY).sanitize(...)
      - pattern: (AntiSamy $AS).scan(...)
      - pattern: Jsoup.clean(...)
      - pattern: new Cleaner(...).clean(...)
      - pattern: |
          (Cleaner $CL).clean(...)
