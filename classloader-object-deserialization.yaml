rules:
  - id: classloader-object-deserialization
    message: "The application may convert user-controlled data into an object, which
      can lead to an insecure deserialization vulnerability. An attacker can
      create a malicious serialized object, pass it to the application, and take
      advantage of the deserialization process to perform Denial-of-service
      (DoS), Remote code execution (RCE), or bypass access control measures. To
      prevent this vulnerability, leverage data formats such as JSON or XML as
      safer alternatives. If you need to deserialize user input in a specific
      format, consider digitally signing the data before serialization to
      prevent tampering. For more information, see: [Deserialization
      prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserializatio\
      n_Cheat_Sheet.html) We do not recommend deserializing untrusted data with
      the `ObjectInputStream`. If you must, you can try overriding the
      `ObjectInputStream#resolveClass()` method or using a safe replacement for
      the generic `readObject()` method."
    severity: ERROR
    metadata:
      likelihood: MEDIUM
      impact: HIGH
      confidence: LOW
      category: security
      subcategory:
        - audit
      cwe:
        - "CWE-502: Deserialization of Untrusted Data"
      cwe2020-top25: true
      cwe2021-top25: true
      cwe2022-top25: true
      display-name: Unsafe Deserialization
      functional-categories:
        - deserialization::sink::load-object::apache.commons
      owasp:
        - A08:2017 - Insecure Deserialization
        - A08:2021 - Software and Data Integrity Failures
      references:
        - https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures
      technology:
        - java
      license: Copyright 2023 Semgrep, Inc.
      vulnerability_class:
        - "Insecure Deserialization "
    languages:
      - java
    patterns:
      - pattern: new org.apache.commons.io.input.ClassLoaderObjectInputStream(...)
